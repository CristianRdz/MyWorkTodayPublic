AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  MyWorkToday

  Sample SAM Template for MyWorkToday

Globals:
  Function:
    Timeout: 10
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SSMGetParameter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 'arn:aws:secretsmanager:us-east-1:*'
        - PolicyName: CognitoAdminInitiateAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminGetUserAttributeVerificationCode
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminForgetDevice
                  - cognito-idp:AdminConfirmDevice
                  - cognito-idp:AdminUpdateDeviceStatus
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateAuthEventFeedback
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: 'arn:aws:cognito-idp:us-east-1:*:*'
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: arn:aws:s3:::*

        - PolicyName: VPCAndRDSManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateVpc
                  - ec2:CreateSubnet
                  - ec2:ModifySubnetAttribute
                  - ec2:CreateSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"
              - Effect: Allow
                Action:
                  - rds:CreateDBInstance
                  - rds:CreateDBSubnetGroup
                  - rds:AddTagsToResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:PutSecretValue
                Resource: "*"
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-SubnetGroup"
      SubnetIds:
        - !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetGroup"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"


  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Sub "${AWS::StackName}-Instance"
      Engine: MySQL
      EngineVersion: '8.0.35'
      MasterUsername: admin
      MasterUserPassword: !Ref RDSSecret
      DBSubnetGroupName: !Ref SubnetGroup
      VPCSecurityGroups:
        - !Ref SecurityGroup
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Instance"
      DeletionProtection: false

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-Secret"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 20
        ExcludeCharacters: '"@/\\'

  MyWorkTodayImagesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: myworktoday-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"


  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWorkTodayImagesS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: arn:aws:s3:::myworktoday-images/images/*


  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: True
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref MyCognitoUserPool
      Precedence: 1

  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref MyCognitoUserPool
      Precedence: 2




  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: AuthApi


  LoginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoginFunction}'
      RetentionInDays: 14

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /login
            Method: post


  SetPasswordFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SetPasswordFunction}'
      RetentionInDays: 14

  SetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: set_password/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /set_password
            Method: post
  ForgotPasswordFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ForgotPasswordFunction}'
      RetentionInDays: 14

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: forgot_password/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /forgot_password
            Method: post

  ConfirmPasswordFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ConfirmPasswordFunction}'
      RetentionInDays: 14

  ConfirmPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: confirm_password/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        ConfirmPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /confirm_password
            Method: post


  ProjectAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ProjectAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ProjectApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseProjectApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref ProjectApi
      StatusCode: '200'

  ProjectApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: ProjectApi
      Auth:
        Authorizers:
          ProjectAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  OptionsFunctionLogGroupProject:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionProject}'
      RetentionInDays: 14

  OptionsFunctionProject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: options/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertTask:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /{proxy+}
            Method: options


  InsertProjectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${InsertProjectFunction}'
      RetentionInDays: 14


  InsertProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_projects/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertProject:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /insert_project
            Method: post
            Auth:
              Authorizer: ProjectAuthorizer

  DeleteProjectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteProjectFunction}'
      RetentionInDays: 14

  DeleteProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_projects/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeleteProject:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /delete_project
            Method: delete
            Auth:
              Authorizer: ProjectAuthorizer

  GetProjectsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetProjectsFunction}'
      RetentionInDays: 14

  GetProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_projects/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetProjects:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /get_projects
            Method: get
            Auth:
              Authorizer: ProjectAuthorizer

  GetProjectByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetProjectByIdFunction}'
      RetentionInDays: 14

  GetProjectByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_projects/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetProjectById:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /get_project_by_id
            Method: get
            Auth:
              Authorizer: ProjectAuthorizer

  UpdateProjectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateProjectFunction}'
      RetentionInDays: 14

  UpdateProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_projects/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        updateProject:
          Type: Api
          Properties:
            RestApiId: !Ref ProjectApi
            Path: /update_project
            Method: put
            Auth:
              Authorizer: ProjectAuthorizer


  RolesAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: RolesAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref RolesApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseRolesApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref RolesApi
      StatusCode: '200'

  RolesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: RolesApi
      Auth:
        Authorizers:
          RolesAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  OptionsFunctionLogGroupRoles:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionRoles}'
      RetentionInDays: 14

  OptionsFunctionRoles:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: options/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertTask:
          Type: Api
          Properties:
            RestApiId: !Ref RolesApi
            Path: /{proxy+}
            Method: options

  InsertRoleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${InsertRoleFunction}'
      RetentionInDays: 14

  InsertRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_roles/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertRole:
          Type: Api
          Properties:
            RestApiId: !Ref RolesApi
            Path: /insert_role
            Method: post
            Auth:
              Authorizer: RolesAuthorizer



  DeleteRoleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteRoleFunction}'
      RetentionInDays: 14

  DeleteRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_roles/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeleteRole:
          Type: Api
          Properties:
            RestApiId: !Ref RolesApi
            Path: /delete_role
            Method: delete
            Auth:
              Authorizer: RolesAuthorizer

  UpdateRoleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateRoleFunction}'
      RetentionInDays: 14

  UpdateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_roles/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        updateRole:
          Type: Api
          Properties:
            RestApiId: !Ref RolesApi
            Path: /update_role
            Method: put
            Auth:
              Authorizer: RolesAuthorizer

  GetRolesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetRolesFunction}'
      RetentionInDays: 14

  GetRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_roles/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetRoles:
          Type: Api
          Properties:
            RestApiId: !Ref RolesApi
            Path: /get_roles
            Method: get
            Auth:
              Authorizer: RolesAuthorizer

  UsersAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: UsersAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref UsersApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseUsersApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref UsersApi
      StatusCode: '200'

  UsersApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: UsersApi
      Auth:
        Authorizers:
          UsersAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  OptionsFunctionLogGroupUser:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionUser}'
      RetentionInDays: 14

  OptionsFunctionUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: options/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertTask:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /{proxy+}
            Method: options


  InsertUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${InsertUserFunction}'
      RetentionInDays: 14

  InsertUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_users/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Timeout: 30
      Events:
        InsertUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /insert_user
            Method: post

  DeleteUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteUserFunction}'
      RetentionInDays: 14

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_users/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /delete_user
            Method: delete
            Auth:
              Authorizer: UsersAuthorizer

  UpdateUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateUserFunction}'
      RetentionInDays: 14

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_users/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        updateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /update_user
            Method: put
            Auth:
              Authorizer: UsersAuthorizer
  GetUsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUsersFunction}'
      RetentionInDays: 14

  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_users/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /get_users
            Method: get
            Auth:
              Authorizer: UsersAuthorizer

  GetMyUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetMyUserFunction}'
      RetentionInDays: 14

  GetMyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_my_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetMyUser:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /get_my_user
            Method: get
            Auth:
              Authorizer: UsersAuthorizer


  TasksAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: TasksAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref TasksApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseTasksApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref TasksApi
      StatusCode: '200'

  TasksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: TasksApi
      Auth:
        Authorizers:
          TasksAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  OptionsFunctionLogGroupTasks:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionTask}'
      RetentionInDays: 14

  OptionsFunctionTask:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: options/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertTask:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /{proxy+}
            Method: options


  InsertTaskFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${InsertTaskFunction}'
      RetentionInDays: 14

  InsertTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_tasks/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertTask:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /insert_task
            Method: post
            Auth:
              Authorizer: TasksAuthorizer

  DeleteTaskFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteTaskFunction}'
      RetentionInDays: 14

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_tasks/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /delete_task
            Method: delete
            Auth:
              Authorizer: TasksAuthorizer

  UpdateTaskFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateTaskFunction}'
      RetentionInDays: 14

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_tasks/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        updateTask:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /update_task
            Method: put
            Auth:
              Authorizer: TasksAuthorizer

  GetTasksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetTasksFunction}'
      RetentionInDays: 14

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_task_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetTasks:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /get_tasks
            Method: get
            Auth:
              Authorizer: TasksAuthorizer

  GetAllTasksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllTasksFunction}'
      RetentionInDays: 14

  GetAllTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_all_task/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetAllTasks:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /get_all_task
            Method: get
            Auth:
              Authorizer: TasksAuthorizer
Outputs:
  RDSEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
  RDSPassword:
    Description: Password for the RDS instance
    # Use Fn::GetAtt to retrieve the secret value
    Value: !GetAtt [ RDSSecret, SecretValue ]
  InsertProjectApiUrl:
    Description: "API Gateway endpoint URL for InsertProjectFunction"
    Value: !Sub "https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_project"
  DeleteProjectApiUrl:
    Description: "API Gateway endpoint URL for DeleteProjectFunction"
    Value: !Sub "https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_project"
  GetProjectsApiUrl:
    Description: "API Gateway endpoint URL for GetProjectsFunction"
    Value: !Sub "https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_projects"
  GetProjectByIdApiUrl:
    Description: "API Gateway endpoint URL for GetProjectByIdFunction"
    Value: !Sub "https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_project_by_id"
  UpdateProjectApiUrl:
    Description: "API Gateway endpoint URL for UpdateProjectFunction"
    Value: !Sub "https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_project"
  InsertRoleApiUrl:
    Description: "API Gateway endpoint URL for InsertRoleFunction"
    Value: !Sub "https://${RolesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_role"
  DeleteRoleApiUrl:
    Description: "API Gateway endpoint URL for DeleteRoleFunction"
    Value: !Sub "https://${RolesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_role"
  UpdateRoleApiUrl:
    Description: "API Gateway endpoint URL for UpdateRoleFunction"
    Value: !Sub "https://${RolesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_role"
  GetRolesApiUrl:
    Description: "API Gateway endpoint URL for GetRolesFunction"
    Value: !Sub "https://${RolesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_roles"
  InsertUserApiUrl:
    Description: "API Gateway endpoint URL for InsertUserFunction"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_user"
  DeleteUserApiUrl:
    Description: "API Gateway endpoint URL for DeleteUserFunction"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_user"
  UpdateUserApiUrl:
    Description: "API Gateway endpoint URL for UpdateUserFunction"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_user"
  GetUsersApiUrl:
    Description: "API Gateway endpoint URL for GetUsersFunction"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_users"
  GetMyUserApiUrl:
    Description: "API Gateway endpoint URL for GetMyUserFunction"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_my_user"
  InsertTaskApiUrl:
    Description: "API Gateway endpoint URL for InsertTaskFunction"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_task"
  DeleteTaskApiUrl:
    Description: "API Gateway endpoint URL for DeleteTaskFunction"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_task"
  UpdateTaskApiUrl:
    Description: "API Gateway endpoint URL for UpdateTaskFunction"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_task"
  GetTasksApiUrl:
    Description: "API Gateway endpoint URL for GetTasksFunction"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_tasks"
  GetAllTasksApiUrl:
    Description: "API Gateway endpoint URL for GetAllTasksFunction"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_all_task"

  LoginApiUrl:
    Description: "API Gateway endpoint URL for LoginFunction"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login"

  SetPasswordApiUrl:
    Description: "API Gateway endpoint URL for SetPasswordFunction"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/set_password"

  ForgotPasswordApiUrl:
    Description: "API Gateway endpoint URL for ForgotPasswordFunction"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/forgot_password"

  ConfirmPasswordApiUrl:
    Description: "API Gateway endpoint URL for ConfirmPasswordFunction"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/confirm_password"

  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn